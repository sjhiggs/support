version: '3.7'

networks:
  mongonet:
    driver: bridge
    name: mongonet

services:

  # ------------------------------------------------------------------
  # 1. Config Server Replica Set (3 Nodes - rs.id: config-rs)
  # ------------------------------------------------------------------
  config1: &config-server-base
    image: mongo:latest
    networks: [mongonet]
    command: mongod --configsvr --replSet config-rs --port 27017 --bind_ip_all --dbpath /data/db
    restart: always

  config1:
    <<: *config-server-base
    container_name: mongo-config1
    hostname: mongo-config1
    volumes:
      - config1-data:/data/db

  config2:
    <<: *config-server-base
    container_name: mongo-config2
    hostname: mongo-config2
    volumes:
      - config2-data:/data/db

  config3:
    <<: *config-server-base
    container_name: mongo-config3
    hostname: mongo-config3
    volumes:
      - config3-data:/data/db

  # ------------------------------------------------------------------
  # 2. Shard 1 Replica Set (3 Nodes - rs.id: shard1-rs)
  # ------------------------------------------------------------------
  shard1_1: &shard-server-base
    image: mongo:latest
    networks: [mongonet]
    command: mongod --shardsvr --replSet shard1-rs --port 27017 --bind_ip_all --dbpath /data/db
    restart: always

  shard1_1:
    <<: *shard-server-base
    container_name: mongo-shard1-1
    hostname: mongo-shard1-1
    volumes:
      - shard1-1-data:/data/db

  shard1_2:
    <<: *shard-server-base
    container_name: mongo-shard1-2
    hostname: mongo-shard1-2
    volumes:
      - shard1-2-data:/data/db

  shard1_3:
    <<: *shard-server-base
    container_name: mongo-shard1-3
    hostname: mongo-shard1-3
    volumes:
      - shard1-3-data:/data/db

  # ------------------------------------------------------------------
  # 3. Query Router (mongos) - Client Entry Point
  # ------------------------------------------------------------------
  mongos:
    image: mongo:latest
    container_name: mongo-router
    hostname: mongo-router
    # The mongos points to ALL members of the Config Server Replica Set
    command: mongos --configdb config-rs/mongo-config1:27017,mongo-config2:27017,mongo-config3:27017 --port 27017 --bind_ip_all
    networks: [mongonet]
    ports:
      - "27017:27017" # Expose the router port for client connections
    depends_on:
      - config1
      - shard1_1
    restart: always


  init_cluster:
    image: mongo:latest
    container_name: mongo-init
    networks: [mongonet]
    depends_on:
      # Keep dependencies to ensure all processes are running before init tries to connect
      - mongos
      - config3
      - shard1_3
    entrypoint: |
      bash -c "
        # 0a. Wait for ALL config servers to be accessible before initiating.
        # This is a basic TCP connection check for one node, assuming others start similarly.
        until mongosh --host mongo-config1:27017 --eval 'quit()'; do
          echo 'Waiting for mongo-config1 process to start...'
          sleep 1
        done

        # 1. Initialize Config Server Replica Set (CSRS)
        echo 'Initializing Config Server Replica Set (config-rs) with 3 members...'
        mongosh --host mongo-config1:27017 --eval '
          rs.initiate({
            _id: \"config-rs\",
            configsvr: true,
            members: [
              { _id: 0, host: \"mongo-config1:27017\" },
              { _id: 1, host: \"mongo-config2:27017\" },
              { _id: 2, host: \"mongo-config3:27017\" }
            ]
          });
        '
        echo 'Config-rs initiated. Waiting for election and replication...'

        # 0b. Wait for the Config Server Replica Set to be fully operational (Primary elected).
        # We poll 'rs.status()' on one member and grep for the Primary state.
        until mongosh --host mongo-config1:27017 --eval 'rs.status()' | grep -q 'PRIMARY'; do
          echo 'Waiting for config-rs to elect a PRIMARY...'
          sleep 2
        done
        echo 'Config-rs PRIMARY elected.'

        # 2. Wait for the MONGOS Router to recognize the Config Server.
        # We check the sh.status() output, but we must wait for the Config RS to be ready first.
        until mongosh --host mongo-router:27017 --eval 'sh.status()' | grep -q 'config'; do
          echo 'Waiting for mongo-router to recognize config-rs...'
          sleep 2
        done
        echo 'Mongo-router is ready.'

        # 3. Initialize Shard 1 Replica Set (3 Members)
        echo 'Initializing Shard 1 Replica Set (shard1-rs) with 3 members...'
        mongosh --host mongo-shard1-1:27017 --eval '
          rs.initiate({
            _id: \"shard1-rs\",
            members: [
              { _id: 0, host: \"mongo-shard1-1:27017\" },
              { _id: 1, host: \"mongo-shard1-2:27017\" },
              { _id: 2, host: \"mongo-shard1-3:27017\" }
            ]
          });
        '
        # Wait for the shard replica set to elect a primary
        sleep 5

        # 4. Add Shard to Cluster via mongos
        echo 'Adding Shard 1 to the Cluster...'
        mongosh --host mongo-router:27017 --eval 'sh.addShard(\"shard1-rs/mongo-shard1-1:27017\")'

        echo 'Sharded Cluster Setup Complete.'

        # 5. init collection
        mongosh --host mongo-router:27017 --eval \"use inventory\" --eval \"db.createCollection('mycollection')\"


        exit 0
      "
    restart: "no"

  kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    container_name: kafka
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - CLUSTER_ID=oh-sxaDRTcyAr6pFRbXyzA
      - NODE_ID=1
      - NODE_ROLE=combined
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # Set to host IP address when working on the services locally
      # - ADVERTISED_HOST_NAME=172.17.0.1
    networks:
      - mongonet

  connect:
    image: debezium/strimzi-connect
    container_name: kafka-connect
    build:
      context: debezium-strimzi
      args:
        DEBEZIUM_CONNECTOR_VERSION: "${DEBEZIUM_CONNECTOR_VERSION}"
        STRIMZI_VERSION: "${STRIMZI_VERSION:-latest-kafka-3.4.0}"
    ports:
      - 8083:8083
      - 9404:9404
    depends_on:
      init_cluster:
        condition: service_completed_successfully # Wait for DB init script to finish
      kafka:
        condition: service_started # Wait for Kafka container to be running
    environment:
      - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
      - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONNECT_METRICS_ENABLED=true
      - KAFKA_CONNECT_JMX_EXPORTER_ENABLED=true
      - |
        KAFKA_CONNECT_CONFIGURATION=
        key.converter=org.apache.kafka.connect.json.JsonConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        key.converter.schemas.enable=false
        value.converter.schemas.enable=false
        group.id=connect
        offset.storage.topic=connect-offsets
        offset.storage.replication.factor=1
        config.storage.topic=connect-configs
        config.storage.replication.factor=1
        status.storage.topic=connect-status
        status.storage.replication.factor=1
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    command: /opt/kafka/kafka_connect_run.sh
    networks:
      - mongonet




volumes:
  config1-data:
  config2-data:
  config3-data:
  shard1-1-data:
  shard1-2-data:
  shard1-3-data:
  prometheus_data:
